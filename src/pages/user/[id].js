import Header from "@/components/Header";
import {
  Box,
  Avatar,
  Typography,
  Grid,
  CssBaseline,
  Stack,
  Pagination,
} from "@mui/material";
import { getSession, signOut } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useRef, useState } from "react";
import AddCircleIcon from "@mui/icons-material/AddCircle";
import { getMyTrees, getUserById, getUserResources } from "@/utils/api";
import useWindowDimensions from "@/contexts/hooks/useWindowDimensions";
import AddIcon from "@mui/icons-material/Add";
import { motion } from "framer-motion";
import { media } from "../../mock/TreePhotos";
import MapCard from "@/components/MapCard";
export default function User({ data }) {
  const scrollRef = useRef(null);

  const router = useRouter();
  const { id } = router.query;

  const [user, setUser] = useState();
  const [trees, setTrees] = useState([]);
  const [shared, setShared] = useState([]);
  const [section, setSection] = useState("maps");
  const { width } = useWindowDimensions();
  const [pageState, setPageState] = useState({
    page: 1,
    per_page: 9,
    offset: 0,
    item_total: 0,
    page_total: 0,
    data: [],
  });
  function stripeHandler() {}
  function newMapbtnHandler() {}
  function handleClick(id) {
    console.log(id);
    router.push(`/map/${id}`);
  }
  function sectionHandler() {}
  useEffect(() => {
    console.log(data);
    if (id) {
      console.log(id);
      getUserById(id).then((res) => {
        console.log(res);
        setUser(res);
      });
      getMyTrees().then((res) => {
        console.log(res.data);
        setTrees(res.data);
      });
    }
  }, [id]);

  function resourceHandler() {
    setSection("resources");
    getUserResources(
      id,
      pageState.page,
      pageState.per_page,
      pageState.offset
    ).then((res) => {
      console.log(res);
      setPageState({
        page: res.page,
        per_page: 9,
        offset: res.offset,
        item_total: res.itemsTotal,
        page_total: res.pageTotal,
        data: res.items,
      });
    });
  }

  useEffect(() => {
    if (pageState.page) {
      getUserResources(
        id,
        pageState.page,
        pageState.per_page,
        pageState.offset
      ).then((res) => {
        console.log(res);
        setPageState((prev) => ({
          ...prev,
          page: res.page,
          per_page: 9,
          offset: res.offset,
          item_total: res.itemsTotal,
          page_total: res.pageTotal,
          data: res.items,
        }));
      });
    }
  }, [pageState.page]);

  return (
    <Box sx={{ backgroundColor: "#F2F1F6", height: "100%" }}>
      <Head>
        <title>Profile</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header user={data} />
      <CssBaseline />
      <>
        <Box
          sx={{
            flex: 1,
            justifyContent: "center",
            alignContent: "center",
            display: "flex",
          }}
        >
          <Box sx={{ maxWidth: 1200, mt: 3, width: 1200 }}>
            <Box sx={{ display: "flex", m: 1 }}>
              <Avatar sx={{ width: 100, height: 100 }} src={user?.photo_url} />
              <Box sx={{ ml: 2 }}>
                <Typography
                  sx={{ fontSize: 20, fontWeight: 600, color: "#111827" }}
                >
                  {user?.firstname} {user?.lastname}
                </Typography>
                <Box
                  sx={{
                    display: "flex",
                    minWidth: 100,
                    justifyContent: "space-between",
                    color: "#6B7280",
                  }}
                >
                  <Typography>@{user?.username}</Typography>
                  <Typography>{trees.length} maps</Typography>
                </Box>
                <Box
                  onClick={() => {
                    signOut();
                  }}
                  sx={{
                    cursor: "pointer",
                    "&:hover": {
                      opacity: 0.2,
                    },
                    borderRadius: 2,
                    display: "flex",
                    boxShadow: 0,
                    backgroundColor: "#00A4FF",
                    flex: 2,
                    mr: 1,
                    justifyContent: "center",
                    alignItems: "center",
                  }}
                >
                  <Typography sx={{ color: "white", fontWeight: 600 }}>
                    Sign Out
                  </Typography>
                </Box>
                {!user?.stripe && (
                  <Box
                    onClick={stripeHandler}
                    sx={{
                      cursor: "pointer",
                      "&:hover": {
                        opacity: 0.2,
                      },
                      borderRadius: 2,
                      display: "flex",
                      boxShadow: 0,
                      backgroundColor: "#00A4FF",
                      flex: 2,
                      mr: 1,
                      justifyContent: "center",
                      alignItems: "center",
                    }}
                  >
                    <Typography sx={{ color: "white", fontWeight: 600 }}>
                      Connect Stripe
                    </Typography>
                  </Box>
                )}
              </Box>
            </Box>
            {/* <Box className={classes.mainHeading}>
								<Typography sx={{ m: 1, textAlign: 'center', fontWeight: 600, my: 9, color: '#FFFFFF' }}>a collection of knowledge maps created or saved by you!</Typography>
							</Box> */}
            <Box
              sx={{
                my: 2,
              }}
            >
              <Box
                ref={scrollRef}
                onClick={newMapbtnHandler}
                sx={{
                  border: 1,
                  width: 300,
                  borderColor: "#DADADA",
                  p: 2,
                  m: 1,
                  px: 4,
                  borderRadius: 3,
                  display: "flex",
                  cursor: "pointer",
                  backgroundColor: "white",
                  "&:hover": {
                    opacity: 0.8,
                  },
                }}
              >
                <Box sx={{ color: "#111827" }}>
                  <Typography sx={{ fontSize: 16, fontWeight: 600 }}>
                    new mindmap
                  </Typography>
                  <Typography sx={{ fontSize: 12, fontWeight: 500 }}>
                    add new links and resources
                  </Typography>
                </Box>
                <AddIcon
                  sx={{
                    alignSelf: "center",
                    fontSize: 30,
                    ml: "auto",
                    mr: 0,
                  }}
                />
              </Box>
            </Box>
            <Box>
              <Box
                sx={{
                  my: 2,
                  display: "flex",
                }}
              >
                <Box
                  onClick={() => setSection("maps")}
                  sx={{
                    border: 1,
                    borderColor: "#DADADA",
                    p: 1,
                    m: 1,
                    borderRadius: 2,
                    cursor: "pointer",
                    backgroundColor: section == "maps" ? "#00A4FF" : "white",
                    color: section == "maps" ? "white" : "black",
                    "&:hover": {
                      opacity: 0.8,
                    },
                  }}
                >
                  <Typography sx={{ fontSize: 14, fontWeight: 600 }}>
                    maps
                  </Typography>
                </Box>
                <Box
                  onClick={() => {
                    setSection("resources");
                  }}
                  sx={{
                    border: 1,
                    borderColor: "#DADADA",
                    p: 1,
                    m: 1,
                    borderRadius: 2,
                    cursor: "pointer",
                    backgroundColor:
                      section == "resources" ? "#00A4FF" : "white",
                    color: section == "resources" ? "white" : "black",
                    "&:hover": {
                      opacity: 0.8,
                    },
                  }}
                >
                  <Typography sx={{ fontSize: 14, fontWeight: 600 }}>
                    resources
                  </Typography>
                </Box>
              </Box>
              {section == "maps" && (
                <Box sx={{ my: 2 }}>
                  <Grid
                    sx={{ overflow: "hidden" }}
                    container
                    spacing={{ xs: 1, md: 1 }}
                    columns={{ xs: 1, sm: 2, md: 4 }}
                  >
                    {trees.map((row, index) => {
                      return (
                        <Grid item xs={1} sm={1} md={1} key={index}>
                          <MapCard row={row} handleClick={handleClick} />
                        </Grid>
                      );
                    })}
                  </Grid>
                </Box>
              )}
              {section == "resources" && (
                <Box>
                  <Grid
                    sx={{ overflow: "hidden" }}
                    container
                    spacing={{ xs: 1, md: 1 }}
                    columns={{ xs: 1, sm: 1, md: 1 }}
                  >
                    {pageState.data.map((res, index) => {
                      return (
                        <Grid item xs={1} sm={1} md={1} key={index}>
                          <Box
                            sx={{
                              flexDirection: "column",
                              p: 1,
                              borderRadius: 2,
                              my: 2,
                              display: "flex",
                              backgroundColor: "#F2F2F2",
                              maxWidth: 900,
                              overflow: "hidden",
                            }}
                          >
                            <Box
                              sx={{
                                display: "flex",
                                "&:hover": {
                                  color: "#00A4FF",
                                },
                              }}
                            >
                              <Box
                                component={"img"}
                                width={100}
                                height={100}
                                sx={{
                                  borderRadius: 2,
                                  mr: 1,
                                  alignSelf: "center",
                                }}
                                src={res.preview_url}
                              />

                              <Box sx={{ cursor: "pointer", ml: 2 }}>
                                <>
                                  <Typography
                                    sx={{
                                      fontWeight: 100,
                                      fontSize: 10,
                                      display: "-webkit-box",
                                      overflow: "hidden",
                                      WebkitBoxOrient: "vertical",
                                      WebkitLineClamp: 1,
                                    }}
                                  >
                                    {res.src}
                                  </Typography>
                                  <Typography
                                    sx={{
                                      fontWeight: 800,
                                      fontSize: 12,
                                      display: "-webkit-box",
                                      overflow: "hidden",
                                      WebkitBoxOrient: "vertical",
                                      WebkitLineClamp: 2,
                                    }}
                                  >
                                    {res.title}
                                  </Typography>
                                  <Typography
                                    sx={{
                                      fontSize: 12,
                                      display: "-webkit-box",
                                      overflow: "hidden",
                                      WebkitBoxOrient: "vertical",
                                      WebkitLineClamp: 3,
                                    }}
                                  >
                                    {res.description}
                                  </Typography>
                                </>
                              </Box>
                            </Box>
                          </Box>
                        </Grid>
                      );
                    })}
                  </Grid>
                  <Box
                    sx={{ my: 5, justifyContent: "center", display: "flex" }}
                  >
                    <Pagination
                      variant="outlined"
                      shape="rounded"
                      count={pageState.page_total}
                      page={pageState.page}
                      onChange={(e, value) => {
                        console.log(value);
                        setPageState((prev) => ({ ...prev, page: value }));
                        if (scrollRef.current) {
                          scrollRef.current.scrollIntoView({
                            behavior: "smooth",
                            inline: "nearest",
                            block: "start",
                          });
                        }
                      }}
                    />
                  </Box>
                </Box>
              )}
            </Box>
            {shared.length > 0 && (
              <Box style={{ marginTop: 30 }}>
                <Box sx={{ my: 1 }}>
                  <Typography sx={{ fontSize: 30, fontWeight: 600 }}>
                    maps shared with you
                  </Typography>
                  {/* <Typography sx={{ fontSize: 14, fontWeight: 50 }}>a collection of maps that other users have shared with you!</Typography> */}
                </Box>

                <Box sx={{ my: 2 }}>
                  <Grid
                    sx={{ overflow: "hidden" }}
                    container
                    spacing={{ xs: 1, md: 3 }}
                    columns={{ xs: 2, sm: 3, md: 6 }}
                  >
                    {shared.map((row, index) => {
                      return (
                        <Grid item xs={1} sm={1} md={2} key={index}>
                          <MapCard row={row} handleClick={handleClick} />
                        </Grid>
                      );
                    })}
                  </Grid>
                </Box>
              </Box>
            )}
          </Box>
        </Box>
      </>
    </Box>
  );
}
export async function getServerSideProps({ req }) {
  const session = await getSession({ req });

  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }
  return {
    props: { data: session },
  };
}
